/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./database.types";

export const publicRepoStatusSchema = z.union([
  z.literal("reviewing"),
  z.literal("bugs"),
  z.literal("healthy"),
  z.literal("error"),
  z.literal("archived"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.string(), z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicCodeHighlightRowSchema = z.object({
  code_issue_id: z.number(),
  created_at: z.string(),
  end_line: z.number(),
  filepath: z.string(),
  id: z.number(),
  repo_id: z.number(),
  start_line: z.number(),
});

export const publicCodeHighlightInsertSchema = z.object({
  code_issue_id: z.number(),
  created_at: z.string().optional(),
  end_line: z.number(),
  filepath: z.string(),
  id: z.number().optional(),
  repo_id: z.number(),
  start_line: z.number(),
});

export const publicCodeHighlightUpdateSchema = z.object({
  code_issue_id: z.number().optional(),
  created_at: z.string().optional(),
  end_line: z.number().optional(),
  filepath: z.string().optional(),
  id: z.number().optional(),
  repo_id: z.number().optional(),
  start_line: z.number().optional(),
});

export const publicCodeHighlightRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("code_highlight_code_issue_id_fkey"),
    columns: z.tuple([z.literal("code_issue_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("code_issue"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("code_highlight_repo_id_fkey"),
    columns: z.tuple([z.literal("repo_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("repo"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicCodeIssueRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  name: z.string(),
  problem: z.string(),
  repo_id: z.number(),
  solution: z.string(),
});

export const publicCodeIssueInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string(),
  problem: z.string(),
  repo_id: z.number(),
  solution: z.string(),
});

export const publicCodeIssueUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  problem: z.string().optional(),
  repo_id: z.number().optional(),
  solution: z.string().optional(),
});

export const publicCodeIssueRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("code_issue_repo_id_fkey"),
    columns: z.tuple([z.literal("repo_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("repo"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicRepoRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  name: z.string(),
  owner: z.string(),
  status: publicRepoStatusSchema,
  updated_at: z.string(),
  user_id: z.string(),
});

export const publicRepoInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string(),
  owner: z.string(),
  status: publicRepoStatusSchema.optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const publicRepoUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  owner: z.string().optional(),
  status: publicRepoStatusSchema.optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});
